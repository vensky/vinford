/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in iOS.
 */
*,
*::before,
*::after {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
}

html {
  line-height: 1.15;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/* Sections
   ========================================================================== */
/**
 * Remove the margin in all browsers.
 */
body {
  margin: 0;
}

/**
 * Render the `main` element consistently in IE.
 */
main {
  display: block;
}

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  margin: 0.67em 0;
  font-size: 2em;
}

/* Grouping content
   ========================================================================== */
/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  overflow: visible;
  /* 2 */
  height: 0;
  /* 1 */
  -webkit-box-sizing: content-box;
          box-sizing: content-box;
  /* 1 */
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/* Text-level semantics
   ========================================================================== */
/**
 * Remove the gray background on active links in IE 10.
 */
a {
  background-color: transparent;
}

/**
 * 1. Remove the bottom border in Chrome 57-
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
  /* 2 */
}

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder;
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  position: relative;
  font-size: 75%;
  line-height: 0;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Embedded content
   ========================================================================== */
/**
 * Remove the border on images inside links in IE 10.
 */
img {
  display: block;
  max-width: 100%;
  height: auto;
  border-style: none;
}

/* Forms
   ========================================================================== */
/**
 * 1. Change the font styles in all browsers.
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
optgroup,
select,
textarea {
  margin: 0;
  /* 2 */
  font-family: inherit;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
}

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button,
input {
  /* 1 */
  overflow: visible;
}

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none;
}

/**
 * Correct the inability to style clickable types in iOS and Safari.
 */
button,
[type=button],
[type=reset],
[type=submit] {
  -webkit-appearance: button;
}

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type=button]::-moz-focus-inner,
[type=reset]::-moz-focus-inner,
[type=submit]::-moz-focus-inner {
  padding: 0;
  border-style: none;
}

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type=button]:-moz-focusring,
[type=reset]:-moz-focusring,
[type=submit]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
 * Correct the padding in Firefox.
 */
fieldset {
  padding: 0.35em 0.75em 0.625em;
}

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 3 */
  color: inherit;
  /* 2 */
  white-space: normal;
  /* 1 */
}

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  vertical-align: baseline;
}

/**
 * Remove the default vertical scrollbar in IE 10+.
 */
textarea {
  overflow: auto;
}

/**
 * 1. Add the correct box sizing in IE 10.
 * 2. Remove the padding in IE 10.
 */
[type=checkbox],
[type=radio] {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type=number]::-webkit-inner-spin-button,
[type=number]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type=search] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
}

/**
 * Remove the inner padding in Chrome and Safari on macOS.
 */
[type=search]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */
}

/* Interactive
   ========================================================================== */
/*
 * Add the correct display in Edge, IE 10+, and Firefox.
 */
details {
  display: block;
}

/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item;
}

/* Misc
   ========================================================================== */
/**
 * Add the correct display in IE 10+.
 */
template {
  display: none;
}

/**
 * Add the correct display in IE 10.
 */
[hidden] {
  display: none;
}

/*.title {
    margin: 10px 0 14px;
    color: $second-color;
    font-size: 24px;
    font-weight: bold;
    line-height: 1.16;

    @media (min-width: $laptop) {
        margin-bottom: 20px;
        font-size: 32px;
    }
}

.subtitle {
    margin: 0;
    font-size: 14px;
    font-weight: normal;

    @media (min-width: $laptop) {
        font-size: 18px;
    }
}

p {
    margin: 8px 0;

    @media (min-width: $laptop) {
        margin: 10px 0;
    }

    &:last-child {
        margin-bottom: 0;
    }
}

ul {

    @include no-list;

    li {
        position: relative;
        padding-left: 18px;
        margin-bottom: 8px;

        @media (min-width: $laptop) {
            padding-left: 24px;
            margin-bottom: 10px;
        }

        &::before {
            position: absolute;
            top: 9px;
            left: 0;
            display: inline-block;
            width: 12px;
            height: 1px;
            background-color: $second-color;
            content: "";

            @media (min-width: $laptop) {
                top: 12px;
                width: 16px;
                height: 2px;
            }
        }
    }
}
*/
body {
  min-width: 320px;
  background-color: #fff;
  color: #182141;
  font-size: 14px;
  font-family: "IBM Plex Sans", "Segoe UI", roboto, "Helvetica Neue", helvetica, arial, sans-serif;
  height: 100vh;
  min-height: 100vh;
}
@media (min-width: 1020px) {
  body {
    font-size: 15px;
  }
}
@media (min-width: 1434px) {
  body {
    font-size: 18px;
  }
}

.container {
  margin: 0 auto;
  padding: 0 20px;
}
@media (min-width: 1020px) {
  .container {
    padding: 0 30px;
    max-width: 964px;
  }
}
@media (min-width: 1434px) {
  .container {
    max-width: 1434px;
  }
}

.section {
  height: 100vh;
  min-height: 100vh;
}

/*.header {
    padding-top: 24px;
    padding-bottom: 30px;

    @media (min-width: $laptop) {
        padding-top: 40px;
        padding-bottom: 40px;
    }

    &__container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding-right: 35px;
        padding-left: 35px;

        @media (min-width: $laptop) {
            padding-right: 60px;
            padding-left: 60px;
        }
    }

    &__logo {
        max-width: 106px;

        @media (min-width: $tablet) {
            max-width: 150px;
        }
    }

    &__link {

        @include no-link;

        display: none;
        width: 20px;
        height: 20px;
        background: url(../img/icon-link.png) no-repeat 50% 50%;
        font-size: 0;

        @media (min-width: $tablet) {
            display: block;
        }

        &:hover {
            transform: scale(1.2);
            transition: transform 0.25s ease-out 0s;
        }
    }
}
*/
.about {
  background-color: #182141;
  color: #fff;
  position: relative;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
}
.about::before {
  content: "";
  background: -webkit-gradient(linear, left top, left bottom, from(#213067), color-stop(57.5%, rgba(33, 48, 103, 0)));
  background: -o-linear-gradient(top, #213067 0%, rgba(33, 48, 103, 0) 57.5%);
  background: linear-gradient(180deg, #213067 0%, rgba(33, 48, 103, 0) 57.5%);
  position: absolute;
  top: 0;
}
.about::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 1;
}
.about__video {
  position: absolute;
  left: 50%;
  -webkit-transform: translateX(-50%);
      -ms-transform: translateX(-50%);
          transform: translateX(-50%);
  z-index: 0;
  width: 100%;
  height: auto;
}
@media (min-width: 1020px) {
  .about__video {
    height: 100%;
  }
}
.about__video video {
  height: auto;
  width: 100%;
}
@media (min-width: 1020px) {
  .about__video video {
    -o-object-fit: cover;
       object-fit: cover;
    height: 100%;
  }
}
.about__container {
  margin: auto;
  position: relative;
  z-index: 2;
}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */